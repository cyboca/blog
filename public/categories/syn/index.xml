<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>syn on panda power!</title>
    <link>https://cyboca.ga/categories/syn/</link>
    <description>Recent content in syn on panda power!</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 17 Nov 2019 06:08:14 +0800</lastBuildDate>
    
	<atom:link href="https://cyboca.ga/categories/syn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DNS&amp;BIND(2)</title>
      <link>https://cyboca.ga/post/syn/dns2/</link>
      <pubDate>Sun, 17 Nov 2019 06:08:14 +0800</pubDate>
      
      <guid>https://cyboca.ga/post/syn/dns2/</guid>
      <description>1.DNS术语 1.1 递归查询和迭代查询  例如A主机要查询C域中的一个主机，A所指向的DNS服务器为B  递归查询： A &amp;ndash;&amp;gt; B &amp;ndash;&amp;gt; C &amp;ndash;&amp;gt; B &amp;ndash;&amp;gt; A
迭代查询： A &amp;ndash;&amp;gt; B A &amp;ndash;&amp;gt; C &amp;ndash;&amp;gt; A
将递归查询和迭代查询的方式放到查询流程中，就如下图所示
递归的意思是找了谁谁就一定要给出答案。如A对B允许递归，那么B询问A时，A就去帮忙找答案，如果A不允许对B递归，那么A就会告诉B的下一层域的地址让B自己去找。
如果整个域系统都使用递归查询，那些公共的根域和顶级域会很忙，
所以DNS的解析流程如下图。客户端到DNS服务器端的这一阶段是递归查询，从DNS服务器之后的是迭代查询。顶级域和根域出于性能的考虑，不允许给其他任何机器递归的。
因此，dns解析器(nslookup、host、dig等)所发出的查询都是递归查询。
1.2 权威服务器和(非)权威应答  权威服务器可以理解为直接上层域的DNS服务器。  www.baidu.com的上层域是baidu.com，对www来说，它的权威服务器就是baidu.com这个域内负责解析的DNS服务器，对于baidu.com来说，它的权威服务器是.com这个域负责解析的DNS服务器。
只有权威服务器直接给出的答案才是永远正确的，通过缓存得到的答案基本都是非权威应答。
1.3 DNS缓存 在客户端和DNS服务器都会使用缓存来加速解析减少网络流量和查询压力，就算是解析不到的否定答案也会缓存。
要访问的主机IP可能会改变，所有使用缓存得到的答案不一定是对的，因此缓存给的答案是非权威的，只有对方主机的上一级给的答案才是权威答案。
如果要访问某个域不存在的主机，这个域的DNS服务器也会给出答案，但是这是否定答案，否定答案也会缓存，并且有缓存时间。
-比如访问baidu.com域下的sfh主机
实际上没有这个主机存在，那么baidu.com就会给出否定答案，为了防止不停的访问搞破坏，这个域负责解析的DNS服务器就会指定否定答案的缓存时间。</description>
    </item>
    
    <item>
      <title>DNS&amp;BIND(1)</title>
      <link>https://cyboca.ga/post/syn/dns1/</link>
      <pubDate>Sat, 16 Nov 2019 01:08:23 +0800</pubDate>
      
      <guid>https://cyboca.ga/post/syn/dns1/</guid>
      <description> 1.DNS DNS主要是用于将域名解析为IP地址的协议，有时候也用于将IP地址反向解析成域名，所以DNS可以实现双向解析。
DNS可以使用TCP和UDP的53端口，基本使用UDP协议的53端口。
1.1域的分类 域是分层管理的，最高层的域是根域&amp;rdquo;.&amp;ldquo;，就是一个点，根域的下一层就是第二层次的顶级域。顶级域下来就是普通的域，如baidu.com。
1.2DNS解析流程  访问www.baidu.com为例  1.访问www.baidu.com，首先会查找DNS缓存，再查找hosts文件，还没有的话就找DNS服务器。
2.DNS服务器收到询问请求，查看自己是否有www.baidu.com的缓存，如果有就直接返回给客户端，没有就越级上访到根域&amp;rdquo;.&amp;ldquo;，并询问根域。
3.根域看到是找.com域的，把到.com域的地址告诉DNS服务器，让DNS服务器去找.com询问。
4.DNS服务器去找.com，.com看是自己辖下的baidu.com，就把IP地址给DNS服务器，让它去找baidu.com。
5.DNS服务器把得到的www.baidu.com的IP告诉客户端.
6.客户端得到IP地址后缓存下来，并去访问www.baidu.com，然后www.baidu.com就把页面内容发送给客户端，就是百度页面。
 需要说明的是
 本机查缓存后没有结果，会查hosts文件，如果没有找到再把查询发送给DNS服务器，但这是默认情况，这个默认顺序是可以改变的。在/etc/nsswitch.conf中有一行&amp;rdquo; hosts: files dns&amp;rdquo;就是定义先查找hosts文件还是先提交给DNS服务器，如果修改为&amp;rdquo;hosts: dns files&amp;rdquo;先提交给DNS服务器。
   缓存是多层次的，所以真正的查询可能并没有那么多步骤，上面的步骤是完全没有所需缓存的查询情况。假如曾经向DNS服务器提交了www.baidu.com的查询，那么在DNS服务器上不但缓存了www.baidu.com的记录，还缓存了&amp;rdquo;.com&amp;rdquo;和&amp;rdquo;baidu.com&amp;rdquo;的记录，如果再有主机向该DNS服务器提交xxx.baidu.com的查询，那么将跳过&amp;rdquo;.&amp;ldquo;和&amp;rdquo;.com&amp;rdquo;的查询过程直接向baidu.com发出查询请求。  1.3/etc/resolv.conf  主要用于定义dns指向，查询主机名时明确指定使用哪个dns服务器，例如此文件中指定了&amp;rdquo;nameserver 114.114.114.114&amp;rdquo;，要查询主机名时，会向114.114.114.114dns服务器发起递归查询，dns服务器会帮忙查找并返回给你结果。  </description>
    </item>
    
  </channel>
</rss>